/*
 * Azure Blockchain Workbench REST API
 * The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.WorkflowDataType;
import java.io.IOException;

/**
 * WorkflowDataType
 */

public class WorkflowDataType {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("elementType")
  private WorkflowDataType elementType = null;

  @SerializedName("elementTypeId")
  private Integer elementTypeId = null;

  public WorkflowDataType id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public WorkflowDataType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowDataType elementType(WorkflowDataType elementType) {
    this.elementType = elementType;
    return this;
  }

   /**
   * Get elementType
   * @return elementType
  **/
  @ApiModelProperty(value = "")
  public WorkflowDataType getElementType() {
    return elementType;
  }

  public void setElementType(WorkflowDataType elementType) {
    this.elementType = elementType;
  }

  public WorkflowDataType elementTypeId(Integer elementTypeId) {
    this.elementTypeId = elementTypeId;
    return this;
  }

   /**
   * Get elementTypeId
   * @return elementTypeId
  **/
  @ApiModelProperty(value = "")
  public Integer getElementTypeId() {
    return elementTypeId;
  }

  public void setElementTypeId(Integer elementTypeId) {
    this.elementTypeId = elementTypeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowDataType workflowDataType = (WorkflowDataType) o;
    return Objects.equals(this.id, workflowDataType.id) &&
        Objects.equals(this.name, workflowDataType.name) &&
        Objects.equals(this.elementType, workflowDataType.elementType) &&
        Objects.equals(this.elementTypeId, workflowDataType.elementTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, elementType, elementTypeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowDataType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    elementType: ").append(toIndentedString(elementType)).append("\n");
    sb.append("    elementTypeId: ").append(toIndentedString(elementTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

