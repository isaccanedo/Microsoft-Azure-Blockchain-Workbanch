# coding: utf-8

"""
    Azure Blockchain Workbench REST API

    The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Connection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'int',
        'ledger_id': 'int',
        'endpoint_url': 'str',
        'funding_account': 'str'
    }

    attribute_map = {
        'connection_id': 'connectionID',
        'ledger_id': 'ledgerID',
        'endpoint_url': 'endpointURL',
        'funding_account': 'fundingAccount'
    }

    def __init__(self, connection_id=None, ledger_id=None, endpoint_url=None, funding_account=None):  # noqa: E501
        """Connection - a model defined in Swagger"""  # noqa: E501

        self._connection_id = None
        self._ledger_id = None
        self._endpoint_url = None
        self._funding_account = None
        self.discriminator = None

        if connection_id is not None:
            self.connection_id = connection_id
        if ledger_id is not None:
            self.ledger_id = ledger_id
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if funding_account is not None:
            self.funding_account = funding_account

    @property
    def connection_id(self):
        """Gets the connection_id of this Connection.  # noqa: E501


        :return: The connection_id of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this Connection.


        :param connection_id: The connection_id of this Connection.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def ledger_id(self):
        """Gets the ledger_id of this Connection.  # noqa: E501


        :return: The ledger_id of this Connection.  # noqa: E501
        :rtype: int
        """
        return self._ledger_id

    @ledger_id.setter
    def ledger_id(self, ledger_id):
        """Sets the ledger_id of this Connection.


        :param ledger_id: The ledger_id of this Connection.  # noqa: E501
        :type: int
        """

        self._ledger_id = ledger_id

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this Connection.  # noqa: E501


        :return: The endpoint_url of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this Connection.


        :param endpoint_url: The endpoint_url of this Connection.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    @property
    def funding_account(self):
        """Gets the funding_account of this Connection.  # noqa: E501


        :return: The funding_account of this Connection.  # noqa: E501
        :rtype: str
        """
        return self._funding_account

    @funding_account.setter
    def funding_account(self, funding_account):
        """Sets the funding_account of this Connection.


        :param funding_account: The funding_account of this Connection.  # noqa: E501
        :type: str
        """

        self._funding_account = funding_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
