# coding: utf-8

"""
    Azure Blockchain Workbench REST API

    The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserChainMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_chain_mapping_id': 'int',
        'user_id': 'int',
        'connection_id': 'int',
        'chain_identifier': 'str',
        'chain_balance': 'float'
    }

    attribute_map = {
        'user_chain_mapping_id': 'userChainMappingID',
        'user_id': 'userID',
        'connection_id': 'connectionID',
        'chain_identifier': 'chainIdentifier',
        'chain_balance': 'chainBalance'
    }

    def __init__(self, user_chain_mapping_id=None, user_id=None, connection_id=None, chain_identifier=None, chain_balance=None):  # noqa: E501
        """UserChainMapping - a model defined in Swagger"""  # noqa: E501

        self._user_chain_mapping_id = None
        self._user_id = None
        self._connection_id = None
        self._chain_identifier = None
        self._chain_balance = None
        self.discriminator = None

        if user_chain_mapping_id is not None:
            self.user_chain_mapping_id = user_chain_mapping_id
        if user_id is not None:
            self.user_id = user_id
        if connection_id is not None:
            self.connection_id = connection_id
        if chain_identifier is not None:
            self.chain_identifier = chain_identifier
        if chain_balance is not None:
            self.chain_balance = chain_balance

    @property
    def user_chain_mapping_id(self):
        """Gets the user_chain_mapping_id of this UserChainMapping.  # noqa: E501


        :return: The user_chain_mapping_id of this UserChainMapping.  # noqa: E501
        :rtype: int
        """
        return self._user_chain_mapping_id

    @user_chain_mapping_id.setter
    def user_chain_mapping_id(self, user_chain_mapping_id):
        """Sets the user_chain_mapping_id of this UserChainMapping.


        :param user_chain_mapping_id: The user_chain_mapping_id of this UserChainMapping.  # noqa: E501
        :type: int
        """

        self._user_chain_mapping_id = user_chain_mapping_id

    @property
    def user_id(self):
        """Gets the user_id of this UserChainMapping.  # noqa: E501


        :return: The user_id of this UserChainMapping.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserChainMapping.


        :param user_id: The user_id of this UserChainMapping.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def connection_id(self):
        """Gets the connection_id of this UserChainMapping.  # noqa: E501


        :return: The connection_id of this UserChainMapping.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this UserChainMapping.


        :param connection_id: The connection_id of this UserChainMapping.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def chain_identifier(self):
        """Gets the chain_identifier of this UserChainMapping.  # noqa: E501


        :return: The chain_identifier of this UserChainMapping.  # noqa: E501
        :rtype: str
        """
        return self._chain_identifier

    @chain_identifier.setter
    def chain_identifier(self, chain_identifier):
        """Sets the chain_identifier of this UserChainMapping.


        :param chain_identifier: The chain_identifier of this UserChainMapping.  # noqa: E501
        :type: str
        """

        self._chain_identifier = chain_identifier

    @property
    def chain_balance(self):
        """Gets the chain_balance of this UserChainMapping.  # noqa: E501


        :return: The chain_balance of this UserChainMapping.  # noqa: E501
        :rtype: float
        """
        return self._chain_balance

    @chain_balance.setter
    def chain_balance(self, chain_balance):
        """Sets the chain_balance of this UserChainMapping.


        :param chain_balance: The chain_balance of this UserChainMapping.  # noqa: E501
        :type: float
        """

        self._chain_balance = chain_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserChainMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
