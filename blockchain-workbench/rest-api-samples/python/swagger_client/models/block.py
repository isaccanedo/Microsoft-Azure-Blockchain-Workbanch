# coding: utf-8

"""
    Azure Blockchain Workbench REST API

    The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Block(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'connection_id': 'int',
        'timestamp': 'datetime',
        'block_number': 'int',
        'block_hash': 'str'
    }

    attribute_map = {
        'id': 'id',
        'connection_id': 'connectionId',
        'timestamp': 'timestamp',
        'block_number': 'blockNumber',
        'block_hash': 'blockHash'
    }

    def __init__(self, id=None, connection_id=None, timestamp=None, block_number=None, block_hash=None):  # noqa: E501
        """Block - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._connection_id = None
        self._timestamp = None
        self._block_number = None
        self._block_hash = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if connection_id is not None:
            self.connection_id = connection_id
        if timestamp is not None:
            self.timestamp = timestamp
        if block_number is not None:
            self.block_number = block_number
        if block_hash is not None:
            self.block_hash = block_hash

    @property
    def id(self):
        """Gets the id of this Block.  # noqa: E501


        :return: The id of this Block.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Block.


        :param id: The id of this Block.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def connection_id(self):
        """Gets the connection_id of this Block.  # noqa: E501


        :return: The connection_id of this Block.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this Block.


        :param connection_id: The connection_id of this Block.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Block.  # noqa: E501


        :return: The timestamp of this Block.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Block.


        :param timestamp: The timestamp of this Block.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def block_number(self):
        """Gets the block_number of this Block.  # noqa: E501


        :return: The block_number of this Block.  # noqa: E501
        :rtype: int
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number):
        """Sets the block_number of this Block.


        :param block_number: The block_number of this Block.  # noqa: E501
        :type: int
        """

        self._block_number = block_number

    @property
    def block_hash(self):
        """Gets the block_hash of this Block.  # noqa: E501


        :return: The block_hash of this Block.  # noqa: E501
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash):
        """Sets the block_hash of this Block.


        :param block_hash: The block_hash of this Block.  # noqa: E501
        :type: str
        """

        self._block_hash = block_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Block):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
