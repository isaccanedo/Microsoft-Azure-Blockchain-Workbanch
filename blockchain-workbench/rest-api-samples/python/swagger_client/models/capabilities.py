# coding: utf-8

"""
    Azure Blockchain Workbench REST API

    The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Capabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_upload_application': 'bool',
        'can_upload_contract_code': 'bool',
        'can_modify_role_assignments': 'bool',
        'can_provision_user': 'bool'
    }

    attribute_map = {
        'can_upload_application': 'canUploadApplication',
        'can_upload_contract_code': 'canUploadContractCode',
        'can_modify_role_assignments': 'canModifyRoleAssignments',
        'can_provision_user': 'canProvisionUser'
    }

    def __init__(self, can_upload_application=None, can_upload_contract_code=None, can_modify_role_assignments=None, can_provision_user=None):  # noqa: E501
        """Capabilities - a model defined in Swagger"""  # noqa: E501

        self._can_upload_application = None
        self._can_upload_contract_code = None
        self._can_modify_role_assignments = None
        self._can_provision_user = None
        self.discriminator = None

        if can_upload_application is not None:
            self.can_upload_application = can_upload_application
        if can_upload_contract_code is not None:
            self.can_upload_contract_code = can_upload_contract_code
        if can_modify_role_assignments is not None:
            self.can_modify_role_assignments = can_modify_role_assignments
        if can_provision_user is not None:
            self.can_provision_user = can_provision_user

    @property
    def can_upload_application(self):
        """Gets the can_upload_application of this Capabilities.  # noqa: E501


        :return: The can_upload_application of this Capabilities.  # noqa: E501
        :rtype: bool
        """
        return self._can_upload_application

    @can_upload_application.setter
    def can_upload_application(self, can_upload_application):
        """Sets the can_upload_application of this Capabilities.


        :param can_upload_application: The can_upload_application of this Capabilities.  # noqa: E501
        :type: bool
        """

        self._can_upload_application = can_upload_application

    @property
    def can_upload_contract_code(self):
        """Gets the can_upload_contract_code of this Capabilities.  # noqa: E501


        :return: The can_upload_contract_code of this Capabilities.  # noqa: E501
        :rtype: bool
        """
        return self._can_upload_contract_code

    @can_upload_contract_code.setter
    def can_upload_contract_code(self, can_upload_contract_code):
        """Sets the can_upload_contract_code of this Capabilities.


        :param can_upload_contract_code: The can_upload_contract_code of this Capabilities.  # noqa: E501
        :type: bool
        """

        self._can_upload_contract_code = can_upload_contract_code

    @property
    def can_modify_role_assignments(self):
        """Gets the can_modify_role_assignments of this Capabilities.  # noqa: E501


        :return: The can_modify_role_assignments of this Capabilities.  # noqa: E501
        :rtype: bool
        """
        return self._can_modify_role_assignments

    @can_modify_role_assignments.setter
    def can_modify_role_assignments(self, can_modify_role_assignments):
        """Sets the can_modify_role_assignments of this Capabilities.


        :param can_modify_role_assignments: The can_modify_role_assignments of this Capabilities.  # noqa: E501
        :type: bool
        """

        self._can_modify_role_assignments = can_modify_role_assignments

    @property
    def can_provision_user(self):
        """Gets the can_provision_user of this Capabilities.  # noqa: E501


        :return: The can_provision_user of this Capabilities.  # noqa: E501
        :rtype: bool
        """
        return self._can_provision_user

    @can_provision_user.setter
    def can_provision_user(self, can_provision_user):
        """Sets the can_provision_user of this Capabilities.


        :param can_provision_user: The can_provision_user of this Capabilities.  # noqa: E501
        :type: bool
        """

        self._can_provision_user = can_provision_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Capabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
