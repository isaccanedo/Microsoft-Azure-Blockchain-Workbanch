# coding: utf-8

"""
    Azure Blockchain Workbench REST API

    The Azure Blockchain Workbench REST API is a Workbench extensibility point, which allows developers to create and manage blockchain applications, manage users and organizations within a consortium, integrate blockchain applications into services and platforms, perform transactions on a blockchain, and retrieve transactional and contract data from a blockchain.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WorkflowStateTransition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'workflow_function_id': 'int',
        'curr_state_id': 'int',
        'allowed_roles': 'list[str]',
        'allowed_instance_roles': 'list[str]',
        'description': 'str',
        'function': 'str',
        'current_state': 'str',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'workflow_function_id': 'workflowFunctionId',
        'curr_state_id': 'currStateId',
        'allowed_roles': 'allowedRoles',
        'allowed_instance_roles': 'allowedInstanceRoles',
        'description': 'description',
        'function': 'function',
        'current_state': 'currentState',
        'display_name': 'displayName'
    }

    def __init__(self, id=None, workflow_function_id=None, curr_state_id=None, allowed_roles=None, allowed_instance_roles=None, description=None, function=None, current_state=None, display_name=None):  # noqa: E501
        """WorkflowStateTransition - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._workflow_function_id = None
        self._curr_state_id = None
        self._allowed_roles = None
        self._allowed_instance_roles = None
        self._description = None
        self._function = None
        self._current_state = None
        self._display_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if workflow_function_id is not None:
            self.workflow_function_id = workflow_function_id
        if curr_state_id is not None:
            self.curr_state_id = curr_state_id
        if allowed_roles is not None:
            self.allowed_roles = allowed_roles
        if allowed_instance_roles is not None:
            self.allowed_instance_roles = allowed_instance_roles
        if description is not None:
            self.description = description
        if function is not None:
            self.function = function
        if current_state is not None:
            self.current_state = current_state
        if display_name is not None:
            self.display_name = display_name

    @property
    def id(self):
        """Gets the id of this WorkflowStateTransition.  # noqa: E501


        :return: The id of this WorkflowStateTransition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowStateTransition.


        :param id: The id of this WorkflowStateTransition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def workflow_function_id(self):
        """Gets the workflow_function_id of this WorkflowStateTransition.  # noqa: E501


        :return: The workflow_function_id of this WorkflowStateTransition.  # noqa: E501
        :rtype: int
        """
        return self._workflow_function_id

    @workflow_function_id.setter
    def workflow_function_id(self, workflow_function_id):
        """Sets the workflow_function_id of this WorkflowStateTransition.


        :param workflow_function_id: The workflow_function_id of this WorkflowStateTransition.  # noqa: E501
        :type: int
        """

        self._workflow_function_id = workflow_function_id

    @property
    def curr_state_id(self):
        """Gets the curr_state_id of this WorkflowStateTransition.  # noqa: E501


        :return: The curr_state_id of this WorkflowStateTransition.  # noqa: E501
        :rtype: int
        """
        return self._curr_state_id

    @curr_state_id.setter
    def curr_state_id(self, curr_state_id):
        """Sets the curr_state_id of this WorkflowStateTransition.


        :param curr_state_id: The curr_state_id of this WorkflowStateTransition.  # noqa: E501
        :type: int
        """

        self._curr_state_id = curr_state_id

    @property
    def allowed_roles(self):
        """Gets the allowed_roles of this WorkflowStateTransition.  # noqa: E501


        :return: The allowed_roles of this WorkflowStateTransition.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_roles

    @allowed_roles.setter
    def allowed_roles(self, allowed_roles):
        """Sets the allowed_roles of this WorkflowStateTransition.


        :param allowed_roles: The allowed_roles of this WorkflowStateTransition.  # noqa: E501
        :type: list[str]
        """

        self._allowed_roles = allowed_roles

    @property
    def allowed_instance_roles(self):
        """Gets the allowed_instance_roles of this WorkflowStateTransition.  # noqa: E501


        :return: The allowed_instance_roles of this WorkflowStateTransition.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_instance_roles

    @allowed_instance_roles.setter
    def allowed_instance_roles(self, allowed_instance_roles):
        """Sets the allowed_instance_roles of this WorkflowStateTransition.


        :param allowed_instance_roles: The allowed_instance_roles of this WorkflowStateTransition.  # noqa: E501
        :type: list[str]
        """

        self._allowed_instance_roles = allowed_instance_roles

    @property
    def description(self):
        """Gets the description of this WorkflowStateTransition.  # noqa: E501


        :return: The description of this WorkflowStateTransition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowStateTransition.


        :param description: The description of this WorkflowStateTransition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def function(self):
        """Gets the function of this WorkflowStateTransition.  # noqa: E501


        :return: The function of this WorkflowStateTransition.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this WorkflowStateTransition.


        :param function: The function of this WorkflowStateTransition.  # noqa: E501
        :type: str
        """

        self._function = function

    @property
    def current_state(self):
        """Gets the current_state of this WorkflowStateTransition.  # noqa: E501


        :return: The current_state of this WorkflowStateTransition.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this WorkflowStateTransition.


        :param current_state: The current_state of this WorkflowStateTransition.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def display_name(self):
        """Gets the display_name of this WorkflowStateTransition.  # noqa: E501


        :return: The display_name of this WorkflowStateTransition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WorkflowStateTransition.


        :param display_name: The display_name of this WorkflowStateTransition.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStateTransition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
